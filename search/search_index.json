{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the TechTaco Knowledge Base","title":"Home"},{"location":"#welcome-to-the-techtaco-knowledge-base","text":"","title":"Welcome to the TechTaco Knowledge Base"},{"location":"disclaimer/","text":"TechTaco.ORG Terms And Conditions Of Use All content provided on this site (blog/wiki/knowledge base) is for informational purposes only. The owner of this makes no representations as to the accuracy or completeness of any information on this site or found by following any link on this site. The owner of will not be liable for any errors or omissions in this information nor for the availability of this information. The owner will not be liable for any losses, injuries, or damages from the display or use of this information.","title":"Disclaimer"},{"location":"disclaimer/#techtacoorg-terms-and-conditions-of-use","text":"All content provided on this site (blog/wiki/knowledge base) is for informational purposes only. The owner of this makes no representations as to the accuracy or completeness of any information on this site or found by following any link on this site. The owner of will not be liable for any errors or omissions in this information nor for the availability of this information. The owner will not be liable for any losses, injuries, or damages from the display or use of this information.","title":"TechTaco.ORG Terms And Conditions Of Use"},{"location":"linux/","text":"Administrative Apache Bind Ftp Ldap Clustering Puppet Networking PostgreSQL GIT Monitoring PKI Certificates","title":"Linux"},{"location":"useful_commands/","text":"Useful Commands Bash Display the access rights in octal of all files with in a directory stat -c %a %n * Diffing a local and remote file. The diff utility can take one operand in the form of stdin (represented by \"-\") ssh node1.example.com cat /full/file/path/text.txt | diff -y --suppress-common-lines /full/file/path/text.txt - Diff two remote files The diff utility can take one operand in the form of stdin (represented by \"-\") diff -y --suppress-common-lines ( ssh node1.example.com cat /full/file/path/text.txt ) ( ssh node2.example.com cat /full/file/path/text.txt ) Sort files by human readable size du -sk * | sort -rn | awk {print $2} | xargs -ia du -hs a du -sk * | sort -rn | awk { split( KB MB GB , v ); s=1; while( $1 1024 ){ $1/=1024; s++ } print int($1) v[s], $2 } sudo du -sk . [ !. ] * * | sort -rn | awk { split( KB MB GB , v ); s=1; while( $1 1024 ){ $1/=1024; s++ } print int($1) v[s], $2 } Test GPG Passphrase echo 1234 | gpg --no-use-agent -o /dev/null --local-user keyID -as - echo The correct passphrase was entered for this key Awk Sed","title":"Useful Commands"},{"location":"useful_commands/#useful-commands","text":"","title":"Useful Commands"},{"location":"useful_commands/#bash","text":"Display the access rights in octal of all files with in a directory stat -c %a %n * Diffing a local and remote file. The diff utility can take one operand in the form of stdin (represented by \"-\") ssh node1.example.com cat /full/file/path/text.txt | diff -y --suppress-common-lines /full/file/path/text.txt - Diff two remote files The diff utility can take one operand in the form of stdin (represented by \"-\") diff -y --suppress-common-lines ( ssh node1.example.com cat /full/file/path/text.txt ) ( ssh node2.example.com cat /full/file/path/text.txt ) Sort files by human readable size du -sk * | sort -rn | awk {print $2} | xargs -ia du -hs a du -sk * | sort -rn | awk { split( KB MB GB , v ); s=1; while( $1 1024 ){ $1/=1024; s++ } print int($1) v[s], $2 } sudo du -sk . [ !. ] * * | sort -rn | awk { split( KB MB GB , v ); s=1; while( $1 1024 ){ $1/=1024; s++ } print int($1) v[s], $2 } Test GPG Passphrase echo 1234 | gpg --no-use-agent -o /dev/null --local-user keyID -as - echo The correct passphrase was entered for this key","title":"Bash"},{"location":"useful_commands/#awk","text":"","title":"Awk"},{"location":"useful_commands/#sed","text":"","title":"Sed"},{"location":"linux/administrative/administrative/","text":"Administrative Articles Dynamic MOTD Sun Java JDK RPM Build The JPackage Way Modified Building Apache Tomcat Connetor (mod-jk) RPM with FPM on Centos 6.x Create RPM Build Environment Compose Mail From Command Line Use DD To Create An ISO Determine The Location Of Linux Kernel Driver Determine Your Current Running Linux Kernel Remove Unused Kernels","title":"Administrative Articles"},{"location":"linux/administrative/administrative/#administrative-articles","text":"Dynamic MOTD Sun Java JDK RPM Build The JPackage Way Modified Building Apache Tomcat Connetor (mod-jk) RPM with FPM on Centos 6.x Create RPM Build Environment Compose Mail From Command Line Use DD To Create An ISO Determine The Location Of Linux Kernel Driver Determine Your Current Running Linux Kernel Remove Unused Kernels","title":"Administrative Articles"},{"location":"linux/administrative/building_apache_tomcat_connetor_mod-jk_rpm_with_fpm_on_centos_6.x/","text":"Building Apache Tomcat Connetor module (mod-jk) RPM with FPM on Centos 6.x The Apache Tomat Connector module (mod_jk) is not currently in included Centos or EPEL repositories. To assist in the deployment and management of the Apache mod_jk module a RPM package will be created from the built source using FPM . If you havn't stumbled upon or used FPM I highly recommend taking a look. Download the latest tomcat-connector source Tomcat-Connector Source Index . As of the writing of this article 1.2.40 Verify Build Prerequisites The following packages will need to be installed in order to correctly build the Apache Tomcat Connetor module (mod-jk). Apache sudo yum install httpd Apache Extension Tool (apxs) sudo yum install apache-devel GCC sudo yum instll gcc Build the Apache Tomcat Connetor module (mod-jk) Extract the downloaded source tar -zxvf tomcat-connectors-1.2.40-src.tar.gz Navigate into the /native subdirectory of the extracted source cd tomcat-connectors-1.2.40-src/native Run the configure script with apxs set ./configure --with-apxs = /usr/sbin/apxs Complie/Make the module make At this point the module is build and could be copied directly to a servers /usr/[lib/lib64]/httpd/mouldes directory to be used or tested. Create FPM Build Root FPM will be used to generate an RPM package from a build root source containing the mimiced directory structure and files to be installed on the system. This means if we want to install the mod_jk.so module file via the rpm into /usr/lib64/httpd/modules we need to create correct diretory structure inside the build root directory for FPM to reference. This can be created anywhere on your file system, but for ease of management and reference I recommand creating the build root in the /native subdirectory of the extracted source Note! The commands reference below are being run from inside the tomcat-connectors-1.2.40-src/native directory Create the Apache configureation directory structure inside the FPM build root sudo mkdir -p fpm_build_root/etc/httpd/conf.d/ Create the Apache Lib modules directory structure inside the FPM build root sudo mkdir -p fpm_build_root/usr/lib64/httpd/modules/ Populate the FPM Build Root With the FPM build root directory structure(s) create we can create the needed Apache configuration files and copy the newly built module into place Note! The commands reference below are being run from inside the tomcat-connectors-1.2.40-src/native directory Create a mod_jk.conf Apache configuration file to load the module and apply come basic settings. The exapmle below is one that has been used in a production environment for basic use sudo bash -c cat EOF fpm_build_root/etc/httpd/conf.d/mod_jk.conf # Load mod_jk module # Specify the filename of the mod_jk lib LoadModule jk_module modules/mod_jk.so # Where to find workers.properties JkWorkersFile conf.d/workers.properties # Where to put jk logs JkLogFile logs/mod_jk.log # Set the jk log level [debug/error/info] JkLogLevel info # Select the log format JkLogStampFormat [%a %b %d %H:%M:%S %Y] # JkRequestLogFormat JkRequestLogFormat %w %V %T # Add shared memory. # This directive is present with 1.2.10 and # later versions of mod_jk, and is needed for # for load balancing to work properly JkShmFile logs/jk.shm EOF Create a Apache Tomcat Connetor module (mod-jk) workers.properties file referenced in the mod_jk.conf file. This file will be empty touch fpm_build_root/etc/httpd/conf.d/workers.properties Copy the newly built Apache Tomcat Connetor module (mod-jk) into the FPM build root sudo cp apache-2.0/mod_jk.so fpm_build_root/usr/lib64/httpd/modules/ Create the Apache Tomcat Connetor module (mod-jk) RPM Package Warning! You must be at the top level of the FPM build root for it to correctly read the directory structures needed to generate the RPM package Run the FPM to generate the RPM package. Note the -p and -v flags contain the version of the built module fpm --iteration = 1 --rpm-use-file-permissions --verbose -s dir -t rpm -p /root/mod_jk-1.2.40.rpm -n mod_jk -v 1 .2.40 ./ Veify The RPM Package Version/Files Verify the package version rpm -qp /root/mod_jk-1.2.40.rpm Verify the package files (contents) rpm -qp --filesbypkg /root/mod_jk-1.2.40.rpm Disclaimer","title":"Building Apache Tomcat Connetor module (mod-jk) RPM with FPM on Centos 6.x"},{"location":"linux/administrative/building_apache_tomcat_connetor_mod-jk_rpm_with_fpm_on_centos_6.x/#building-apache-tomcat-connetor-module-mod-jk-rpm-with-fpm-on-centos-6x","text":"The Apache Tomat Connector module (mod_jk) is not currently in included Centos or EPEL repositories. To assist in the deployment and management of the Apache mod_jk module a RPM package will be created from the built source using FPM . If you havn't stumbled upon or used FPM I highly recommend taking a look.","title":"Building Apache Tomcat Connetor module (mod-jk) RPM with FPM on Centos 6.x"},{"location":"linux/administrative/building_apache_tomcat_connetor_mod-jk_rpm_with_fpm_on_centos_6.x/#download-the-latest-tomcat-connector-source","text":"Tomcat-Connector Source Index . As of the writing of this article 1.2.40","title":"Download the latest tomcat-connector source"},{"location":"linux/administrative/building_apache_tomcat_connetor_mod-jk_rpm_with_fpm_on_centos_6.x/#verify-build-prerequisites","text":"The following packages will need to be installed in order to correctly build the Apache Tomcat Connetor module (mod-jk). Apache sudo yum install httpd Apache Extension Tool (apxs) sudo yum install apache-devel GCC sudo yum instll gcc","title":"Verify Build Prerequisites"},{"location":"linux/administrative/building_apache_tomcat_connetor_mod-jk_rpm_with_fpm_on_centos_6.x/#build-the-apache-tomcat-connetor-module-mod-jk","text":"Extract the downloaded source tar -zxvf tomcat-connectors-1.2.40-src.tar.gz Navigate into the /native subdirectory of the extracted source cd tomcat-connectors-1.2.40-src/native Run the configure script with apxs set ./configure --with-apxs = /usr/sbin/apxs Complie/Make the module make At this point the module is build and could be copied directly to a servers /usr/[lib/lib64]/httpd/mouldes directory to be used or tested.","title":"Build the Apache Tomcat Connetor module (mod-jk)"},{"location":"linux/administrative/building_apache_tomcat_connetor_mod-jk_rpm_with_fpm_on_centos_6.x/#create-fpm-build-root","text":"FPM will be used to generate an RPM package from a build root source containing the mimiced directory structure and files to be installed on the system. This means if we want to install the mod_jk.so module file via the rpm into /usr/lib64/httpd/modules we need to create correct diretory structure inside the build root directory for FPM to reference. This can be created anywhere on your file system, but for ease of management and reference I recommand creating the build root in the /native subdirectory of the extracted source Note! The commands reference below are being run from inside the tomcat-connectors-1.2.40-src/native directory Create the Apache configureation directory structure inside the FPM build root sudo mkdir -p fpm_build_root/etc/httpd/conf.d/ Create the Apache Lib modules directory structure inside the FPM build root sudo mkdir -p fpm_build_root/usr/lib64/httpd/modules/","title":"Create FPM Build Root"},{"location":"linux/administrative/building_apache_tomcat_connetor_mod-jk_rpm_with_fpm_on_centos_6.x/#populate-the-fpm-build-root","text":"With the FPM build root directory structure(s) create we can create the needed Apache configuration files and copy the newly built module into place Note! The commands reference below are being run from inside the tomcat-connectors-1.2.40-src/native directory Create a mod_jk.conf Apache configuration file to load the module and apply come basic settings. The exapmle below is one that has been used in a production environment for basic use sudo bash -c cat EOF fpm_build_root/etc/httpd/conf.d/mod_jk.conf # Load mod_jk module # Specify the filename of the mod_jk lib LoadModule jk_module modules/mod_jk.so # Where to find workers.properties JkWorkersFile conf.d/workers.properties # Where to put jk logs JkLogFile logs/mod_jk.log # Set the jk log level [debug/error/info] JkLogLevel info # Select the log format JkLogStampFormat [%a %b %d %H:%M:%S %Y] # JkRequestLogFormat JkRequestLogFormat %w %V %T # Add shared memory. # This directive is present with 1.2.10 and # later versions of mod_jk, and is needed for # for load balancing to work properly JkShmFile logs/jk.shm EOF Create a Apache Tomcat Connetor module (mod-jk) workers.properties file referenced in the mod_jk.conf file. This file will be empty touch fpm_build_root/etc/httpd/conf.d/workers.properties Copy the newly built Apache Tomcat Connetor module (mod-jk) into the FPM build root sudo cp apache-2.0/mod_jk.so fpm_build_root/usr/lib64/httpd/modules/","title":"Populate the FPM Build Root"},{"location":"linux/administrative/building_apache_tomcat_connetor_mod-jk_rpm_with_fpm_on_centos_6.x/#create-the-apache-tomcat-connetor-module-mod-jk-rpm-package","text":"Warning! You must be at the top level of the FPM build root for it to correctly read the directory structures needed to generate the RPM package Run the FPM to generate the RPM package. Note the -p and -v flags contain the version of the built module fpm --iteration = 1 --rpm-use-file-permissions --verbose -s dir -t rpm -p /root/mod_jk-1.2.40.rpm -n mod_jk -v 1 .2.40 ./","title":"Create the Apache Tomcat Connetor module (mod-jk) RPM Package"},{"location":"linux/administrative/building_apache_tomcat_connetor_mod-jk_rpm_with_fpm_on_centos_6.x/#veify-the-rpm-package-versionfiles","text":"Verify the package version rpm -qp /root/mod_jk-1.2.40.rpm Verify the package files (contents) rpm -qp --filesbypkg /root/mod_jk-1.2.40.rpm","title":"Veify The RPM Package Version/Files"},{"location":"linux/administrative/building_apache_tomcat_connetor_mod-jk_rpm_with_fpm_on_centos_6.x/#disclaimer","text":"","title":"Disclaimer"},{"location":"linux/administrative/compose_mail_from_command_line/","text":"Compose Mail From Command Line Composing mail from command line uses the following format: mail -s For example write mail to mail -s Hello boss@example.com Then type in your message, followed by an \u2018control-D\u2019 at the beginning of a line. To stop simply type dot (.): Output: Hi, This is a test . Cc:","title":"Compose Mail From Command Line"},{"location":"linux/administrative/compose_mail_from_command_line/#compose-mail-from-command-line","text":"Composing mail from command line uses the following format: mail -s For example write mail to mail -s Hello boss@example.com Then type in your message, followed by an \u2018control-D\u2019 at the beginning of a line. To stop simply type dot (.): Output: Hi, This is a test . Cc:","title":"Compose Mail From Command Line"},{"location":"linux/administrative/create_rpm_build_environment/","text":"Create RPM Build Environment Overview Create an RPM Build Environment for a unprivilged user account. Warning! Building RPMs should NEVER be done as the root user. It shoudl ALWAYS be done with an unprivileged user account. Building RPMs as root could cause potential damage to your system. Prerequisites Install the rpm-build package sudo yum install rpm-build Most SRPMs targetted to be rebuilt on CentOS also need certain rpmbuild build macros and helper scripts, which are contained in package: redhat-rpm-config. To get results as desired, you should also install it in the same fashion as noted above, substituting the new package name. sudo yum install redhat-rpm-config Building packages will require various compilers, install a few commons ones to get you started sudo yum install gcc gcc-c++ make Create directories for RPM building Create RPM build directory structure in your home directory mkdir -p ~/rpmbuild/ { BUILD,RPMS,SOURCES,SPECS,SRPMS } Create .rpm macros file hunder your home directory echo %_topdir %(echo $HOME)/rpmbuild ~/.rpmmacros References http://wiki.centos.org/HowTos/SetupRpmBuildEnvironment","title":"Create RPM Build Environment"},{"location":"linux/administrative/create_rpm_build_environment/#create-rpm-build-environment","text":"","title":"Create RPM Build Environment"},{"location":"linux/administrative/create_rpm_build_environment/#overview","text":"Create an RPM Build Environment for a unprivilged user account. Warning! Building RPMs should NEVER be done as the root user. It shoudl ALWAYS be done with an unprivileged user account. Building RPMs as root could cause potential damage to your system.","title":"Overview"},{"location":"linux/administrative/create_rpm_build_environment/#prerequisites","text":"Install the rpm-build package sudo yum install rpm-build Most SRPMs targetted to be rebuilt on CentOS also need certain rpmbuild build macros and helper scripts, which are contained in package: redhat-rpm-config. To get results as desired, you should also install it in the same fashion as noted above, substituting the new package name. sudo yum install redhat-rpm-config Building packages will require various compilers, install a few commons ones to get you started sudo yum install gcc gcc-c++ make","title":"Prerequisites"},{"location":"linux/administrative/create_rpm_build_environment/#create-directories-for-rpm-building","text":"Create RPM build directory structure in your home directory mkdir -p ~/rpmbuild/ { BUILD,RPMS,SOURCES,SPECS,SRPMS } Create .rpm macros file hunder your home directory echo %_topdir %(echo $HOME)/rpmbuild ~/.rpmmacros","title":"Create directories for RPM building"},{"location":"linux/administrative/create_rpm_build_environment/#references","text":"http://wiki.centos.org/HowTos/SetupRpmBuildEnvironment","title":"References"},{"location":"linux/administrative/determine_current_running_linux_kernel/","text":"Determine Current Running Linux Kernel Commands Print kernel release sudo uname -r Print kernel version sudo uname -v Usage Usage: uname [ OPTION ] ... Print certain system information. With no OPTION, same as -s. -a, --all print all information, in the following order, except omit -p and -i if unknown: -s, --kernel-name print the kernel name -n, --nodename print the network node hostname -r, --kernel-release print the kernel release -v, --kernel-version print the kernel version -m, --machine print the machine hardware name -p, --processor print the processor type or unknown -i, --hardware-platform print the hardware platform or unknown -o, --operating-system print the operating system --help display this help and exit --version output version information and exit","title":"Determine Current Running Linux Kernel"},{"location":"linux/administrative/determine_current_running_linux_kernel/#determine-current-running-linux-kernel","text":"","title":"Determine Current Running Linux Kernel"},{"location":"linux/administrative/determine_current_running_linux_kernel/#commands","text":"Print kernel release sudo uname -r Print kernel version sudo uname -v","title":"Commands"},{"location":"linux/administrative/determine_current_running_linux_kernel/#usage","text":"Usage: uname [ OPTION ] ... Print certain system information. With no OPTION, same as -s. -a, --all print all information, in the following order, except omit -p and -i if unknown: -s, --kernel-name print the kernel name -n, --nodename print the network node hostname -r, --kernel-release print the kernel release -v, --kernel-version print the kernel version -m, --machine print the machine hardware name -p, --processor print the processor type or unknown -i, --hardware-platform print the hardware platform or unknown -o, --operating-system print the operating system --help display this help and exit --version output version information and exit","title":"Usage"},{"location":"linux/administrative/determine_the_location_of_linux_kernel_driver/","text":"Determine The Location of Linux Kernel Driver Note /lib/modules/kernel-version/ directory stores all compiled drivers under Linux operating system. Display current modules ls -l /lib/modules/ $( uname -r ) Navigate to current modules directory cd /lib/modules/ $( uname -r )","title":"Determine The Location of Linux Kernel Driver"},{"location":"linux/administrative/determine_the_location_of_linux_kernel_driver/#determine-the-location-of-linux-kernel-driver","text":"Note /lib/modules/kernel-version/ directory stores all compiled drivers under Linux operating system. Display current modules ls -l /lib/modules/ $( uname -r ) Navigate to current modules directory cd /lib/modules/ $( uname -r )","title":"Determine The Location of Linux Kernel Driver"},{"location":"linux/administrative/dynamic_motd/","text":"Dynamic MOTD Overview Enabling an automatic message on each SSH connection, with a dynamic MOTD. Configure By default the SSH connection cats the file /etc/motd. You can disable this by editing the sshd_config and restarting the sshd service Modify the ** #PrintMotd yes ** line Hint! This is not required: You can also leave the /etc/motd file blank or have a static and dynamic combo PrintMotd no Configure the PAM connection module. Add the following at the end of the file ** /etc/pam.d/login ** session optional pam_motd.so Configure the ** /etc/profile ** file to include executing the dynamic MOTD script /usr/local/bin/dynmotd Hint! The dynamic MOTD script below is using facter (Puppet Labs) to gather system information Create a dynamic MOTD script ** /usr/local/bin/dynmotd *** #!/bin/bash echo -e \\n facts = ` facter fqdn is_virtual lsbdistdescription architecture kernelversion uptime physicalprocessorcount processor0 memorytotal ipaddress ` echo Hostname: `echo ${ facts } | awk -F fqdn = |ipaddress { print $2 } ` echo Virtual Machine: `echo ${ facts } | awk -F is_virtual = |kernelversion { print $2 } ` echo OS: `echo ${ facts } | awk -F lsbdistdescription = |memorytotal { print $2 } ` echo Architecture: `echo ${ facts } | awk -F architecture = |fqdn { print $2 } ` echo Kernel: `echo ${ facts } | awk -F kernelversion = |lsbdistdescription { print $2 } ` echo Up Time: `echo ${ facts } | awk -F uptime = | $ { print $2 } ` echo Processors Count: `echo ${ facts } | awk -F physicalprocessorcount = |processor0 { print $2 } ` echo Processor Info: `echo ${ facts } | awk -F processor0 = |uptime { print $2 } ` echo Memory: `echo ${ facts } | awk -F memorytotal = |physicalprocessorcount { print $2 } ` echo IP: `echo ${ facts } | awk -F ipaddress = |is_virtual { print $2 } ` Modify the permissions to make the dynamic MOTD script executable sudo chmod +x /usr/local/bin/dynmotd Testing ~ \ue0b0 ssh techtaco.org Last login: Mon Aug 4 08 :40:15 2014 from core.arin.net Hostname: R2.droids.local Virtual Machine: false OS: CentOS release 6 .5 ( Final ) Architecture: i386 Kernel: 2 .6.32 Up Time: 41 days Processors Count: 1 Processor Info: Intel ( R ) Atom ( TM ) CPU D525 @ 1 .80GHz Memory: 3 .82 GB IP: 192 .168.1.254 [ smbambling@R2 ~ ] $","title":"Dynamic MOTD"},{"location":"linux/administrative/dynamic_motd/#dynamic-motd","text":"","title":"Dynamic MOTD"},{"location":"linux/administrative/dynamic_motd/#overview","text":"Enabling an automatic message on each SSH connection, with a dynamic MOTD.","title":"Overview"},{"location":"linux/administrative/dynamic_motd/#configure","text":"By default the SSH connection cats the file /etc/motd. You can disable this by editing the sshd_config and restarting the sshd service Modify the ** #PrintMotd yes ** line Hint! This is not required: You can also leave the /etc/motd file blank or have a static and dynamic combo PrintMotd no Configure the PAM connection module. Add the following at the end of the file ** /etc/pam.d/login ** session optional pam_motd.so Configure the ** /etc/profile ** file to include executing the dynamic MOTD script /usr/local/bin/dynmotd Hint! The dynamic MOTD script below is using facter (Puppet Labs) to gather system information Create a dynamic MOTD script ** /usr/local/bin/dynmotd *** #!/bin/bash echo -e \\n facts = ` facter fqdn is_virtual lsbdistdescription architecture kernelversion uptime physicalprocessorcount processor0 memorytotal ipaddress ` echo Hostname: `echo ${ facts } | awk -F fqdn = |ipaddress { print $2 } ` echo Virtual Machine: `echo ${ facts } | awk -F is_virtual = |kernelversion { print $2 } ` echo OS: `echo ${ facts } | awk -F lsbdistdescription = |memorytotal { print $2 } ` echo Architecture: `echo ${ facts } | awk -F architecture = |fqdn { print $2 } ` echo Kernel: `echo ${ facts } | awk -F kernelversion = |lsbdistdescription { print $2 } ` echo Up Time: `echo ${ facts } | awk -F uptime = | $ { print $2 } ` echo Processors Count: `echo ${ facts } | awk -F physicalprocessorcount = |processor0 { print $2 } ` echo Processor Info: `echo ${ facts } | awk -F processor0 = |uptime { print $2 } ` echo Memory: `echo ${ facts } | awk -F memorytotal = |physicalprocessorcount { print $2 } ` echo IP: `echo ${ facts } | awk -F ipaddress = |is_virtual { print $2 } ` Modify the permissions to make the dynamic MOTD script executable sudo chmod +x /usr/local/bin/dynmotd","title":"Configure"},{"location":"linux/administrative/dynamic_motd/#testing","text":"~ \ue0b0 ssh techtaco.org Last login: Mon Aug 4 08 :40:15 2014 from core.arin.net Hostname: R2.droids.local Virtual Machine: false OS: CentOS release 6 .5 ( Final ) Architecture: i386 Kernel: 2 .6.32 Up Time: 41 days Processors Count: 1 Processor Info: Intel ( R ) Atom ( TM ) CPU D525 @ 1 .80GHz Memory: 3 .82 GB IP: 192 .168.1.254 [ smbambling@R2 ~ ] $","title":"Testing"},{"location":"linux/administrative/remove_unused_kernels/","text":"Remove Unused Kernels Overview When running yum update you can some times revive the error below Error Summary ------------- Disk Requirements: At least 10MB more space needed on the /boot filesystem. To get around this error you can remove unused kernels from the system to create space. You'll need to make sure that you do not remove the current running kernel from the system. You can use the uname -r command to view the current running kernel that you should not remove. uname -r 2 .6.32-220.4.2.el6.x86_64 List Current Installed Kernels You can view the current installed kernels on the systems by running the following command. rpm -qa | grep kernel | grep -e ^kernel You can view all no running kernels on the system with the following command. rpm -qa | grep kernel | grep -e ^kernel | grep -v `uname -r`\\|headers\\|firmware Clean-Up Space and Yum Update To make this process easier you can run the following command to remove the unused kernels and kick off a yum update. I've purposely not thrown the -y switch via yum remove so that you can review any dependencies that might be removed along with the kernel. This command will only proceed from command to command if the previous command is successful. REMOVE = $( rpm -qa | grep kernel | grep -e ^kernel | grep -v `uname -r`\\|headers\\|firmware ) sudo yum remove ${ REMOVE } sudo yum update -y You can also run this in a loop with a little escaping for i in HOST1 HOST2 ; REMOVE = ` ssh $i rpm -qa kernel \\* | grep -v \\` uname -r \\`\\| headers \\| firmware ` ; ssh $i yum -y remove $REMOVE ; ssh $i yum -y update ; done","title":"Remove Unused Kernels"},{"location":"linux/administrative/remove_unused_kernels/#remove-unused-kernels","text":"","title":"Remove Unused Kernels"},{"location":"linux/administrative/remove_unused_kernels/#overview","text":"When running yum update you can some times revive the error below Error Summary ------------- Disk Requirements: At least 10MB more space needed on the /boot filesystem. To get around this error you can remove unused kernels from the system to create space. You'll need to make sure that you do not remove the current running kernel from the system. You can use the uname -r command to view the current running kernel that you should not remove. uname -r 2 .6.32-220.4.2.el6.x86_64","title":"Overview"},{"location":"linux/administrative/remove_unused_kernels/#list-current-installed-kernels","text":"You can view the current installed kernels on the systems by running the following command. rpm -qa | grep kernel | grep -e ^kernel You can view all no running kernels on the system with the following command. rpm -qa | grep kernel | grep -e ^kernel | grep -v `uname -r`\\|headers\\|firmware","title":"List Current Installed Kernels"},{"location":"linux/administrative/remove_unused_kernels/#clean-up-space-and-yum-update","text":"To make this process easier you can run the following command to remove the unused kernels and kick off a yum update. I've purposely not thrown the -y switch via yum remove so that you can review any dependencies that might be removed along with the kernel. This command will only proceed from command to command if the previous command is successful. REMOVE = $( rpm -qa | grep kernel | grep -e ^kernel | grep -v `uname -r`\\|headers\\|firmware ) sudo yum remove ${ REMOVE } sudo yum update -y You can also run this in a loop with a little escaping for i in HOST1 HOST2 ; REMOVE = ` ssh $i rpm -qa kernel \\* | grep -v \\` uname -r \\`\\| headers \\| firmware ` ; ssh $i yum -y remove $REMOVE ; ssh $i yum -y update ; done","title":"Clean-Up Space and Yum Update"},{"location":"linux/administrative/sun_java_jdk_rpm_build_the_jpackage_way_modified/","text":"Sun Java JDK RPM Build The JPackage Way Modified Building Sun Java 1.6 u31 Download the JDK 1.6 u31 from Oracle Go to http://www.oracle.com/technetwork/java/javase/downloads/index.html Click on the Download button for the Java SE 6 Update 31 JDK Select the Accept License Agreement radio button Download the jdk-6u31-linux-x64.bin for 64bit or jdk-6u31-linux-i586.bin for 32bit file Download the Timezone Updater from Oracle Go to http://www.oracle.com/technetwork/java/javase/downloads/index.html Click on the Download button for JDK DST Timezone Update Tool - 1.3.45 Select the Accept License Agreement radio button Download the tzupdater-1_3_45-2011n.zip file Create RPM Build Environment (If needed) More to come on this\u2026 Move/Copy Updated/JDK into SOURCES If you building on a remote machine you\u2019ll need to transfer the files to that build server via SCP or some other preferred method mv tzupdater-1_3_45-2011n.zip ~/rpms/SOURCES/ mv jdk-6u31-linux-x64.bin ~/rpms/SOURCES/ Download java-1.6.0-sun-1.6.0.31-1.0.cf.nosrc.rpm This is being performed on your build server. We will download directly to the SRPM build directory to keep things clean wget wget http://mirror.city-fan.org/ftp/contrib/java/java-1.6.0-sun-1.6.0.31-1.0.cf.nosrc.rpm ~/rpms/SRPMS/ Build Sun Java RPMs rpmbuild --rebuild ~/rpms/SRPMS/java-1.6.0-sun-1.6.0.31-1.0.cf.nosrc.rpm After completion you should have the following RPMs in ~/rpms/RPMS/x86_64 java-1.6.0-sun-1.6.0.31-1.0.cf.x86_64.rpm java-1.6.0-sun-demo-1.6.0.31-1.0.cf.x86_64.rpm java-1.6.0-sun-devel-1.6.0.31-1.0.cf.x86_64.rpm java-1.6.0-sun-jdbc-1.6.0.31-1.0.cf.x86_64.rpm java-1.6.0-sun-plugin-1.6.0.31-1.0.cf.x86_64.rpm java-1.6.0-sun-src-1.6.0.31-1.0.cf.x86_64.rpm Installing Java JDK (Development Environment) yum install java-1.6.0-sun-devel Check Java Version [ host1 ] ~ ] $ java -version java version 1.6.0_31 Java ( TM ) SE Runtime Environment ( build 1 .6.0_31-b04 ) Java HotSpot ( TM ) 64 -Bit Server VM ( build 20 .6-b01, mixed mode )","title":"Sun Java JDK RPM Build The JPackage Way Modified"},{"location":"linux/administrative/sun_java_jdk_rpm_build_the_jpackage_way_modified/#sun-java-jdk-rpm-build-the-jpackage-way-modified","text":"","title":"Sun Java JDK RPM Build The JPackage Way Modified"},{"location":"linux/administrative/sun_java_jdk_rpm_build_the_jpackage_way_modified/#building-sun-java-16-u31","text":"","title":"Building Sun Java 1.6 u31"},{"location":"linux/administrative/sun_java_jdk_rpm_build_the_jpackage_way_modified/#download-the-jdk-16-u31-from-oracle","text":"Go to http://www.oracle.com/technetwork/java/javase/downloads/index.html Click on the Download button for the Java SE 6 Update 31 JDK Select the Accept License Agreement radio button Download the jdk-6u31-linux-x64.bin for 64bit or jdk-6u31-linux-i586.bin for 32bit file","title":"Download the JDK 1.6 u31 from Oracle"},{"location":"linux/administrative/sun_java_jdk_rpm_build_the_jpackage_way_modified/#download-the-timezone-updater-from-oracle","text":"Go to http://www.oracle.com/technetwork/java/javase/downloads/index.html Click on the Download button for JDK DST Timezone Update Tool - 1.3.45 Select the Accept License Agreement radio button Download the tzupdater-1_3_45-2011n.zip file","title":"Download the Timezone Updater from Oracle"},{"location":"linux/administrative/sun_java_jdk_rpm_build_the_jpackage_way_modified/#create-rpm-build-environment-if-needed","text":"More to come on this\u2026","title":"Create RPM Build Environment (If needed)"},{"location":"linux/administrative/sun_java_jdk_rpm_build_the_jpackage_way_modified/#movecopy-updatedjdk-into-sources","text":"If you building on a remote machine you\u2019ll need to transfer the files to that build server via SCP or some other preferred method mv tzupdater-1_3_45-2011n.zip ~/rpms/SOURCES/ mv jdk-6u31-linux-x64.bin ~/rpms/SOURCES/","title":"Move/Copy Updated/JDK into SOURCES"},{"location":"linux/administrative/sun_java_jdk_rpm_build_the_jpackage_way_modified/#download-java-160-sun-16031-10cfnosrcrpm","text":"This is being performed on your build server. We will download directly to the SRPM build directory to keep things clean wget wget http://mirror.city-fan.org/ftp/contrib/java/java-1.6.0-sun-1.6.0.31-1.0.cf.nosrc.rpm ~/rpms/SRPMS/","title":"Download java-1.6.0-sun-1.6.0.31-1.0.cf.nosrc.rpm"},{"location":"linux/administrative/sun_java_jdk_rpm_build_the_jpackage_way_modified/#build-sun-java-rpms","text":"rpmbuild --rebuild ~/rpms/SRPMS/java-1.6.0-sun-1.6.0.31-1.0.cf.nosrc.rpm After completion you should have the following RPMs in ~/rpms/RPMS/x86_64 java-1.6.0-sun-1.6.0.31-1.0.cf.x86_64.rpm java-1.6.0-sun-demo-1.6.0.31-1.0.cf.x86_64.rpm java-1.6.0-sun-devel-1.6.0.31-1.0.cf.x86_64.rpm java-1.6.0-sun-jdbc-1.6.0.31-1.0.cf.x86_64.rpm java-1.6.0-sun-plugin-1.6.0.31-1.0.cf.x86_64.rpm java-1.6.0-sun-src-1.6.0.31-1.0.cf.x86_64.rpm","title":"Build Sun Java RPMs"},{"location":"linux/administrative/sun_java_jdk_rpm_build_the_jpackage_way_modified/#installing-java-jdk-development-environment","text":"yum install java-1.6.0-sun-devel","title":"Installing Java JDK (Development Environment)"},{"location":"linux/administrative/sun_java_jdk_rpm_build_the_jpackage_way_modified/#check-java-version","text":"[ host1 ] ~ ] $ java -version java version 1.6.0_31 Java ( TM ) SE Runtime Environment ( build 1 .6.0_31-b04 ) Java HotSpot ( TM ) 64 -Bit Server VM ( build 20 .6-b01, mixed mode )","title":"Check Java Version"},{"location":"linux/administrative/use_dd_to_create_an_iso/","text":"Use DD To Create An ISO Explanation dd means \u201cdisk dump.\u201d if means \u201cinput file.\u201d of means \u201coutput file.\u201d Command Example: dd if = /dev/cdrom of = /cdrom_image.iso","title":"Use DD To Create An ISO"},{"location":"linux/administrative/use_dd_to_create_an_iso/#use-dd-to-create-an-iso","text":"Explanation dd means \u201cdisk dump.\u201d if means \u201cinput file.\u201d of means \u201coutput file.\u201d Command Example: dd if = /dev/cdrom of = /cdrom_image.iso","title":"Use DD To Create An ISO"}]}